{"version":3,"sources":["webpack:///webpack/bootstrap?7f80","webpack:///external \"express-msteams-host\"?e438","webpack:///external \"request\"?0fbe","webpack:///external \"debug\"?b2c7","webpack:///external \"botbuilder-teams\"?cb0c","webpack:///./src/app/server.ts?53c8","webpack:///external \"express\"?22fe","webpack:///external \"http\"?8d19","webpack:///external \"path\"?74bb","webpack:///external \"morgan\"?3206","webpack:///external \"dotenv\"?e70f","webpack:///./src/app/TeamsAppsComponents.ts?b0db","webpack:///./src/app/roombookingBot.ts?6898","webpack:///external \"botbuilder\"?fa14","webpack:///external \"axios\"?70c6","webpack:///./shared.js?b691","webpack:///./node_modules/node-wit/lib/wit.js?7828","webpack:///./node_modules/node-wit/lib/config.js?627e","webpack:///external \"isomorphic-fetch\"?73a8","webpack:///./node_modules/node-wit/lib/log.js?bf9f","webpack:///./auth.js?0bd8","[]","webpack:///./config.js?a1bc","webpack:///external \"moment\"?bd76","webpack:///external \"pg\"?4da2","webpack:///./src/app/roombookingConnector.ts?36c0","webpack:///external \"node-json-db\"?027e"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","Express","http","path","morgan","express_msteams_host_1","log","debug","config","allComponents","express","port","process","env","PORT","use","json","verify","req","res","buf","encoding","rawBody","toString","urlencoded","extended","set","join","__dirname","static","MsTeamsApiRouter","MsTeamsPageRouter","root","next","removeHeader","index","createServer","listen","err","console","error","nonce","__export","builder","teamBuilder","axios_1","firstEntity","WIT_TOKEN","Wit","auth","wit","accessToken","moment","Client","request","client","connectionString","DATABASE_URL","ssl","connect","TokenVar","url","room_Type_choice","building_choice","start_date","end_date","start_time","end_time","room_id","email","random","roombookingBot","roombookingBot_1","[object Object]","connector","this","Connector","inMemoryStorage","MemoryBotStorage","universalBot","UniversalBot","botbuilder","session","sendTyping","dialog","defaultDialog","helpDialog","query","cardData","rows","map","data","sd","JSON","stringify","split","ed","HeroCard","title","booking_id","subtitle","text","format","msg","Message","attachmentLayout","AttachmentLayout","carousel","attachments","length","Prompts","endDialog","reloadAction","matches","beginDialog","results","dialogData","response","send","endConversationAction","confirmPrompt","welcome_msg","content","body","facts","floor_number","room_number","message","jsondata","subject","contentType","toRecipients","emailAddress","address","getAccessToken","then","token","method","headers","Authorization","endDialogWithResult","startDate","endDate","startTime","endTime","room_type","isBefore","duration","diff","parseInt","asHours","asMinutes","roomsBooked","filter","res1","RoomsAvailable","row","room","capacity","images","CardImage","buttons","CardAction","imBack","building_name","replace","choice","entity","on","convUpdateHandler","onQuery","event","callback","parameters","ComposeExtensionResponse","result","ThumbnailCard","toAttachment","toResponse","onQuerySettingsUrl","composeExtension","type","suggestedActions","actions","onSettingsUpdate","state","extractTextFromMessage","toLowerCase","entities","document","local_char","default","icon","file_extension","substr","indexOf","webUrl","openUrl","catch","room_booking","startenddatetime","values","from","to","startdatetime","show_bookings","activity","forEach","ent","trim","__decorate","BotDeclaration","MICROSOFT_APP_ID","MICROSOFT_APP_PASSWORD","Array","isArray","_slicedToArray","arr","iterator","_arr","_n","_d","_e","undefined","_s","_i","done","push","sliceIterator","TypeError","_require","DEFAULT_API_VERSION","DEFAULT_WIT_URL","DEFAULT_MAX_STEPS","fetch","makeWitResponseHandler","logger","endpoint","rsp","Error","_rsp","status","validate","opts","witURL","apiVersion","Accept","Content-Type","Logger","INFO","_config","freeze","_sessions","context","verbose","junk","qs","encodeURIComponent","fullURL","handler","Promise","all","_funcs","_defineProperty","obj","configurable","writable","levels","funcs","warn","noop","lvl","_this","level","x","should","DEBUG","WARN","ERROR","Q","deferred","defer","requestParams","grant_type","client_id","clientId","client_secret","clientSecret","resource","post","tokenEndpoint","form","parsedBody","parse","reject","error_description","access_token","resolve","promise","JsonDB","roombookingConnector","connectors","webhookUrl","user","appType","groupName","existing","color","getData","card","O365ConnectorCard","themeColor","section","O365ConnectorCardSection","activityTitle","activityText","fact","O365ConnectorCardFact","sections","action","O365ConnectorCardViewAction","target","potentialAction","uri","decodeURI","content-type","statusCode","ConnectorDeclaration"],"mappings":"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","file":"server.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 4);\n","module.exports = require(\"express-msteams-host\");","module.exports = require(\"request\");","module.exports = require(\"debug\");","module.exports = require(\"botbuilder-teams\");","import * as Express from 'express';\r\nimport * as http from 'http';\r\nimport * as path from 'path';\r\nimport * as morgan from 'morgan';\r\nimport { MsTeamsApiRouter, MsTeamsPageRouter } from 'express-msteams-host';\r\nimport * as debug from \"debug\";\r\n\r\n// Initialize debug logging module\r\nconst log = debug(\"msteams\");\r\n\r\nlog(`Initializing Microsoft Teams Express hosted App...`);\r\n\r\n// Initialize dotenv, to use .env file settings if existing\r\nrequire('dotenv').config();\r\n\r\n// The import of components has to be done AFTER the dotenv config\r\nimport * as allComponents from './TeamsAppsComponents';\r\n\r\n// Create the Express webserver\r\nconst express = Express();\r\nconst port = process.env.port || process.env.PORT || 3007;\r\n\r\n// Inject the raw request body onto the request object\r\nexpress.use(Express.json({\r\n    verify: (req, res, buf: Buffer, encoding: string): void => {\r\n        (<any>req).rawBody = buf.toString();\r\n    }\r\n}));\r\nexpress.use(Express.urlencoded({ extended: true }));\r\n\r\n // Express configuration\r\nexpress.set('view engine', 'ejs');  \r\nexpress.set('views', path.join(__dirname, '/'));\r\n\r\n// Add simple logging\r\nexpress.use(morgan('tiny'));\r\n\r\n// Add /scripts and /assets as static folders\r\nexpress.use('/scripts', Express.static(path.join(__dirname, 'web/scripts')));\r\nexpress.use('/assets', Express.static(path.join(__dirname, 'web/assets')));\r\n\r\n// routing for bots, connectors and incoming web hooks - based on the decorators\r\n// For more information see: TODO\r\nexpress.use(MsTeamsApiRouter(allComponents));\r\n\r\n// routing for pages for tabs and connector configuration\r\n// For more information see: TODO\r\nexpress.use(MsTeamsPageRouter({\r\n    root: path.join(__dirname, 'web/')\r\n}));\r\n\r\n// Fallback\r\nexpress.use( (req: any, res: any, next: any) => {\r\n    res.removeHeader(\"Content-Security-Policy\")\r\n    res.removeHeader(\"X-Frame-Options\"); // IE11\r\n    return next();\r\n});\r\n\r\n// Set default web page\r\nexpress.use('/', Express.static(path.join(__dirname, 'web/'), {\r\n    index: 'index.html'\r\n}));\r\n\r\n// Set the port\r\nexpress.set('port', port);\r\n\r\n// Start the webserver\r\nhttp.createServer(express).listen(port, (err: any) => {\r\n    if (err) {\r\n        return console.error(err);\r\n    }\r\n    log(`Server running on ${port}`);\r\n});\r\n","module.exports = require(\"express\");","module.exports = require(\"http\");","module.exports = require(\"path\");","module.exports = require(\"morgan\");","module.exports = require(\"dotenv\");","// Components will be added here\nexport const nonce = {}; // Do not remove!\n// Automatically added for the roombookingBot bot\nexport * from \"./roombookingBot\";\n// Automatically added for the roombookingConnector connector\nexport * from \"./roombookingConnector\";\n","import * as builder from 'botbuilder';\r\nimport * as teamBuilder from 'botbuilder-teams';\r\nimport { BotDeclaration, IBot } from 'express-msteams-host';\r\nimport * as debug from \"debug\";\r\nimport axios from 'axios';\r\nimport { Session } from 'inspector';\r\nimport { Result } from 'range-parser';\r\n\r\nconst { firstEntity, WIT_TOKEN } = require('../../shared.js');\r\nconst Wit = require('node-wit/lib/wit');\r\n// Initialize debug logging module\r\nconst log = debug(\"msteams\");\r\nconst auth = require('../../auth');\r\nconst wit = new Wit({ accessToken: WIT_TOKEN });\r\nvar moment = require('moment');\r\nconst { Client } = require('pg');\r\nvar request = require('request');\r\nconst client = new Client({\r\n    connectionString: process.env.DATABASE_URL,\r\n    ssl: true,\r\n});\r\n\r\nclient.connect();\r\n\r\n//Adding Authentication and calling graph api.\r\n// const AuthenticationContext = require('adal-node').AuthenticationContext;\r\n// const MicrosoftGraph = require(\"@microsoft/microsoft-graph-client\");\r\n// const authorityHostUrl = 'https://login.windows.net';\r\n// const tenantName = 'rsyorg.onmicrosoft.com'; //azure active directory tenant name. ie: name.onmicrosoft.com\r\n// const authorityUrl = authorityHostUrl + '/' + tenantName;\r\n// const applicationId = 'cb441bf2-9b70-46cb-b4f5-6a6b15d1113b'; //application id for registered app\r\n// const clientSecret = '0VujIz?K|}&scPsR&LYygs0B_2@Xg22XP]*B;23Gi3+/M-D?t@71H'; //azure active directory registered app secret\r\n// const resource = \"https://graph.microsoft.com\"; //URI of resource where token is valid\r\n\r\n/**\r\n * Implementation for roombooking Bot\r\n */\r\nvar TokenVar = \"\";\r\nvar url = \"\";\r\nvar floor_choice = \"\";\r\nvar room_Type_choice = \"\";\r\nvar building_choice = \"\";\r\nvar start_date = \"\";\r\nvar end_date = \"\";\r\nvar start_time = \"\";\r\nvar end_time = \"\";\r\nvar room_id = \"\";\r\nvar email = \"\";\r\nvar duration = \"\";\r\nvar random = \"\";\r\n\r\n@BotDeclaration(\r\n    '/api/messages',\r\n    process.env.MICROSOFT_APP_ID,\r\n    process.env.MICROSOFT_APP_PASSWORD)\r\n\r\nexport class roombookingBot implements IBot {\r\n\r\n    public readonly Connector: teamBuilder.TeamsChatConnector;\r\n    private readonly universalBot: builder.UniversalBot;\r\n    private inMemoryStorage: builder.IBotStorage;\r\n\r\n    /**\r\n     * The constructor\r\n     * @param connector \r\n     */\r\n\r\n    public constructor(connector: teamBuilder.TeamsChatConnector) {\r\n        this.Connector = connector;\r\n        this.inMemoryStorage = new builder.MemoryBotStorage();\r\n        this.universalBot = new builder.UniversalBot(this.Connector).\r\n            set('storage', this.inMemoryStorage); // Use the in-memory storage for state\r\n\r\n        // Install sendTyping as middleware\r\n        this.universalBot.use({\r\n            botbuilder: (session, next) => {\r\n                session.sendTyping();\r\n                next();\r\n            }\r\n        });\r\n\r\n        // Add dialogs here\r\n        this.universalBot.dialog('/', this.defaultDialog);\r\n        this.universalBot.dialog('/help', this.helpDialog);\r\n\r\n        //show bookings intent\r\n\r\n        this.universalBot.dialog('/showBookings', [\r\n\r\n            function (session) {\r\n                console.log('email', email);\r\n                client.query(`SELECT * FROM booking_transactions where email='${email}'`, (err, res) => {\r\n                    if (err) throw err;\r\n                    console.log('response', res);\r\n\r\n                    const cardData = res.rows.map(data => {\r\n                        var sd = JSON.stringify(data.start_date).split('T')[0];\r\n                        var ed = JSON.stringify(data.end_date).split('T')[0]\r\n                        console.log('res', data);\r\n                        return (\r\n                            new builder.HeroCard(session)\r\n                                .title(\"Booking Id: \" + JSON.stringify(data.booking_id))\r\n                                .subtitle(\"Room_id: \" + JSON.stringify(data.room_id))\r\n                                .text(\"startDate: \" + moment(sd).format('MMM Do YYYY') + \"<br/>\" +\r\n                                    \"End Date: \" + moment(ed).format('MMM Do YYYY') + \"<br/>\" +\r\n                                    \"start Time: \" + JSON.stringify(data.start_time) + \"<br/>\" +\r\n                                    \"End Time: \" + JSON.stringify(data.end_time)\r\n                                )\r\n                        )\r\n                    })\r\n                    const msg = new builder.Message(session)\r\n                        .attachmentLayout(builder.AttachmentLayout.carousel)\r\n                        .attachments(cardData)\r\n                        .text(`There are ${res.rows.length} bookings with your email`)\r\n\r\n                    builder.Prompts.text(session, msg);\r\n\r\n                });\r\n                session.endDialog();\r\n            },]).reloadAction('startOver', 'Ok, starting over.', {\r\n                matches: /^start over$|^start again$/i\r\n            });\r\n\r\n        //1st condition\r\n        this.universalBot.dialog('/askFromstarting', [\r\n\r\n            function (session) {\r\n                if (building_choice == \"\") {\r\n                    session.beginDialog('askforbuildingname');\r\n                    return;\r\n                }\r\n                else {\r\n                    session.beginDialog('askfordatetime');\r\n                    return;\r\n                }\r\n\r\n            },\r\n            function (session, results) {\r\n\r\n                if (random == \"one\") {\r\n                    session.dialogData.room_id = results.response;\r\n                    room_id = session.dialogData.room_id;\r\n                }\r\n\r\n                session.beginDialog('showBookingDialog');\r\n\r\n            },\r\n            function (session, results) {\r\n\r\n                client.query(`insert into booking_transactions(room_id,start_time,end_time,start_date,end_date,email,floor_number,building_name)\r\n     values('${room_id}','${start_time + \":00\"}','${end_time + \":00\"}','${start_date}','${end_date}','${email}','${floor_choice}','${building_choice}')`, (err, res) => {\r\n                        if (err) {\r\n                            session.send(\"error\" + err)\r\n                        }\r\n                        else {\r\n                            session.send(`<b style=\"color:green\">Your booking is confirmed<b> `);\r\n                        }\r\n\r\n                    });\r\n                start_date = \"\";\r\n                end_date = \"\";\r\n                start_time = \"\";\r\n                end_time = \"\";\r\n                building_name = \"\";\r\n                room_Type_choice = \"\";\r\n                building_choice = \"\";\r\n                email = \"\";\r\n                room_id = \"\";\r\n                session.endDialog();\r\n            }\r\n        ]).endConversationAction(\r\n            \"endBooking\", \"Ok. Goodbye.\",\r\n            {\r\n                matches: /^cancel$|^goodbye$/i,\r\n                confirmPrompt: \"This will cancel your booking. Are you sure?\"\r\n                // onSelectAction: function (session, args,next) { \r\n\r\n                //     start_date = \"\";\r\n                //     end_date = \"\";\r\n                //     start_time = \"\";\r\n                //     end_time = \"\";\r\n                //     building_name = \"\";\r\n                //         room_Type_choice=\"\";\r\n                //         building_choice=\"\";\r\n                //     email=\"\";\r\n                //      room_id = \"\";\r\n                //  }                \r\n            }\r\n        ).reloadAction('startOver', 'Ok, starting over.', {\r\n            matches: /^start over$|^start again$/i\r\n        });\r\n\r\n\r\n        this.universalBot.dialog('/welcome_user', [\r\n            function (session) {\r\n                var welcome_msg = require('./json/welcome.msg.json');\r\n                session.send(welcome_msg);\r\n                // session.endDialog();\r\n            }]);\r\n        var building_name = \"\";\r\n\r\n        // Dialog to ask for a date and time\r\n        this.universalBot.dialog('showBookingDialog', [\r\n            function (session) {\r\n\r\n                client.query(`select r.room_id,r.room_number,f.floor_number from rooms as r\r\n        Inner join floor as f \r\n        ON r.floor_id=f.floor_id \r\n        where room_id='${room_id}'`, (err, res) => {\r\n                        if (err) {\r\n                            throw err;\r\n                        }\r\n                        res.rows.map(data => {\r\n                            return (\r\n                                welcome_msg.attachments[0].content.body[1].facts[2].value = data.floor_number,\r\n                                welcome_msg.attachments[0].content.body[1].facts[3].value = data.room_number\r\n                            )\r\n                        })\r\n\r\n                    });\r\n\r\n                var welcome_msg = require('./json/booking.details.json');\r\n                var maildata = require('./json/mail.boyd.json');\r\n                welcome_msg.attachments[0].content.body[1].facts[1].value = building_choice;\r\n                welcome_msg.attachments[0].content.body[1].facts[4].value = room_Type_choice;\r\n                welcome_msg.attachments[0].content.body[1].facts[5].value = moment(start_date).format('MMM Do YYYY');\r\n                welcome_msg.attachments[0].content.body[1].facts[6].value = moment(end_date).format('MMM Do YYYY');\r\n                welcome_msg.attachments[0].content.body[1].facts[7].value = start_time;\r\n                welcome_msg.attachments[0].content.body[1].facts[8].value = end_time;\r\n                if (session.message && session.message.value) {\r\n\r\n                    ///send mail to that user\r\n                    var jsondata = {\r\n                        \"message\": {\r\n                            \"subject\": \"Room Booking Details\",\r\n                            \"body\": {\r\n                                \"contentType\": \"Text\",\r\n                                \"content\": \"The new cafeteria is open.\"\r\n                            },\r\n                            \"toRecipients\": [\r\n                                {\r\n                                    \"emailAddress\": {\r\n                                        \"address\": session.message.value.email\r\n                                    }\r\n                                }\r\n                            ]\r\n                        }\r\n                    };\r\n\r\n                    auth.getAccessToken().then(function (token) {\r\n                        TokenVar = token;\r\n                    }, function (error) {\r\n                        console.error('>>> Error getting access token: ' + error);\r\n                    });\r\n\r\n                    request({\r\n                        url: \"https://graph.microsoft.com/v1.0/me/sendMail\",\r\n                        method: \"POST\",\r\n                        headers: {\r\n                            Authorization: `Bearer ${TokenVar}`\r\n                        },\r\n                        json: true,   // <--Very important!!!\r\n                        body: jsondata\r\n                    }, function (error, response, body) {\r\n                        if (error) {\r\n                            console.log('------errror---', error);\r\n                        }\r\n                        else {\r\n                            console.log('sent');\r\n                            session.send('Your booking details have been sent to your email ' + session.message.value.email)\r\n\r\n                        }\r\n                    });\r\n\r\n                    email = session.message.value.email;\r\n\r\n                    welcome_msg.attachments[0].content.body[1].facts[0].value = email;\r\n                    session.endDialogWithResult();\r\n                    return;\r\n                }\r\n                else {\r\n                    session.send(welcome_msg);\r\n                    return;\r\n                }\r\n\r\n            },\r\n            function (session, results) {\r\n                session.endDialogWithResult(results);\r\n            }\r\n        ]);\r\n\r\n\r\n        this.universalBot.dialog('askfordatetime', [\r\n            function (session) {\r\n                var msg = require('./json/datetime.json');\r\n\r\n                if (room_Type_choice !== \"\") {\r\n                    console.log('room_choices', room_Type_choice);\r\n                    msg.attachments[0].content.body[6].value = room_Type_choice;\r\n\r\n                }\r\n                if (start_date !== \"\") {\r\n                    console.log('start', start_date);\r\n                    if (start_time !== \"\") {\r\n                        console.log('time', start_time);\r\n                        msg.attachments[0].content.body[2].value = start_time;\r\n                    }\r\n                    msg.attachments[0].content.body[1].value = start_date;\r\n                }\r\n                if (end_date !== \"\") {\r\n                    console.log('start', end_date);\r\n                    if (end_time !== \"\") {\r\n                        console.log('time', end_time);\r\n                        msg.attachments[0].content.body[4].value = end_time;\r\n                    }\r\n                    msg.attachments[0].content.body[3].value = end_date;\r\n                }\r\n                if (session.message && session.message.value) {\r\n\r\n                    start_date = session.message.value.startDate;\r\n                    end_date = session.message.value.endDate;\r\n                    start_time = session.message.value.startTime;\r\n                    end_time = session.message.value.endTime;\r\n                    room_Type_choice = session.message.value.room_type;\r\n\r\n                    if (start_date && end_date && start_time && end_time) {\r\n                        if (moment(start_date).isBefore(moment().format(\"YYYY-MM-DD\")) || moment(end_date).isBefore(moment().format(\"YYYY-MM-DD\"))) {\r\n                            if (moment(start_date).isBefore(moment().format(\"YYYY-MM-DD\"))) {\r\n                                session.send(`<b style=\"color:red\">Please select start date from today onwards</b>`);\r\n                                msg.attachments[0].content.body[1].value = \"\";\r\n                                msg.attachments[0].content.body[3].value = end_date;\r\n\r\n                            }\r\n                            else if (moment(start_date).isBefore(moment().format(\"YYYY-MM-DD\")) && moment(end_date).isBefore(moment().format(\"YYYY-MM-DD\"))) {\r\n                                session.send(`<b style=\"color:red\">Please select start date and end date from today onwards</b>`);\r\n                                msg.attachments[0].content.body[1].value = \"\";\r\n                                msg.attachments[0].content.body[3].value = \"\";\r\n                            }\r\n                            else {\r\n                                session.send(`<b style=\"color:red\">Please select end date from today onwards</b>`);\r\n                                msg.attachments[0].content.body[1].value = start_date;\r\n                                msg.attachments[0].content.body[3].value = \"\";\r\n\r\n                            }\r\n                            msg.attachments[0].content.body[2].value = start_time;\r\n                            msg.attachments[0].content.body[4].value = end_time;\r\n                            session.send(msg);\r\n                            return;\r\n                        }\r\n                        else {\r\n                            // if (moment(start_date).isSame(end_date)) {\r\n                            var startTime = moment(start_time, \"HH:mm:ss a\");\r\n                            var endTime = moment(end_time, \"HH:mm:ss a\");\r\n                            var duration = moment.duration(endTime.diff(startTime));\r\n                            var hours = parseInt(duration.asHours());\r\n                            var minutes = parseInt(duration.asMinutes()) % 60;\r\n                            duration = hours + ' hour and ' + minutes + ' minutes.';\r\n\r\n                            client.query(`select distinct room_id from booking_transactions where\r\n((start_time BETWEEN '${start_time}' and '${end_time}') or (end_time BETWEEN '${start_time}' and '${end_time}'))\r\nand((start_date BETWEEN '${start_date}' and '${end_date}')or(end_date BETWEEN '${start_date}' and '${end_date}'))\r\norder by room_id`, (err, res) => {\r\n                                    if (err) throw err;\r\n\r\n                                    var roomsBooked = res.rows.filter(data => {\r\n                                        return data.room_id\r\n                                    })\r\n\r\n                                    client.query(`select r.room_id,r.capacity,r.room_number,f.floor_number,rt.roomtype_id,b.building_id from rooms as r\r\n                                Inner join floor as f \r\n                                ON r.floor_id=f.floor_id \r\n                                Inner join room_Type as rt\r\n                                on r.roomtype_id=rt.roomtype_id\r\n                                Inner join building as b\r\n                                on r.building_id=b.building_id\r\n                                where room_type='${room_Type_choice}' AND building_name='${building_choice}'`, (err, res1) => {\r\n                                            if (err) throw err;\r\n\r\n                                            var RoomsAvailable = res1.rows.filter((row) => {\r\n                                                for (let room in roomsBooked) {\r\n                                                    if (row.room_id == roomsBooked[room].room_id) {\r\n                                                        return false;\r\n                                                    }\r\n                                                }\r\n                                                return true;\r\n                                            })\r\n\r\n                                            const cardData = RoomsAvailable.map(data => {\r\n                                                return (\r\n                                                    new builder.HeroCard(session)\r\n                                                        .title(\"Room Id: \" + JSON.stringify(data.room_id))\r\n                                                        .subtitle(\"Capacity: \" + JSON.stringify(data.capacity) + \"     Room Type:\" + room_Type_choice)\r\n                                                        .text(`<b>Room Number: ${JSON.stringify(data.room_number)}    Floor Number: ${data.floor_number}</b>`)\r\n                                                        .images([builder.CardImage.create(session, 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQe-kfvktz-yGOOtUgVKT41-cohHBf6bVyINEKXF54S5paPJh9S')])\r\n                                                        .buttons([\r\n                                                            builder.CardAction.imBack(session, JSON.stringify(data.room_id), \"Book\")\r\n                                                        ])\r\n                                                )\r\n                                            })\r\n                                            const msg = new builder.Message(session)\r\n                                                .attachmentLayout(builder.AttachmentLayout.carousel)\r\n                                                .attachments(cardData)\r\n                                                .text(`<b>There are ${RoomsAvailable.length} rooms available as per your requirement.</b>`)\r\n\r\n                                            builder.Prompts.text(session, msg);\r\n\r\n                                        })\r\n                                })\r\n                        }\r\n\r\n                    }\r\n\r\n                    else {\r\n                        session.send(`<b style=\"color:red\">All the fields are required, please select respective start and end time</b>`);\r\n                        session.send(msg);\r\n                        return;\r\n                    }\r\n                }\r\n                else {\r\n                    random = \"one\";\r\n                    // msg.attachments[0].content.body[1].value = \"\";\r\n                    // msg.attachments[0].content.body[2].value = \"\";\r\n                    // msg.attachments[0].content.body[3].value = \"\";\r\n                    // msg.attachments[0].content.body[4].value = \"\";\r\n                    session.send(msg);\r\n                }\r\n\r\n            },\r\n            function (session, results) {\r\n                session.endDialogWithResult(results);\r\n            }\r\n        ]);\r\n\r\n        this.universalBot.dialog('askforbuildingname', [\r\n            function (session) {\r\n\r\n                var building_name = \"\";\r\n                client.query('SELECT * from building', (err, res) => {\r\n                    if (err) throw err;\r\n                    for (let row of res.rows) {\r\n                        building_name += JSON.stringify(row.building_name).replace(/\\\"/g, \"\") + \":\"\r\n\r\n                    }\r\n                    builder.Prompts.choice(session, \"Please tell in which building you want to book a room, \", building_name.split(':'));\r\n                });\r\n\r\n            },\r\n            function (session, results) {\r\n                building_choice = results.response.entity;\r\n                session.endDialogWithResult();\r\n            }\r\n        ]);\r\n\r\n        this.universalBot.dialog('confirmDialog', [\r\n            function (session) {\r\n\r\n                builder.Prompts.text(session, \"Please Enter your email to  confirm your booking\");\r\n            },\r\n            function (session, results) {\r\n                session.endDialogWithResult(results);\r\n            }\r\n        ]);\r\n        // Control messages\r\n        this.universalBot.on('conversationUpdate', this.convUpdateHandler);\r\n        this.Connector.onQuery('message',\r\n            (event: builder.IEvent, query: teamBuilder.ComposeExtensionQuery, callback: (err: Error, result: teamBuilder.IComposeExtensionResponse, statusCode: number) => void) => {\r\n                if (query.parameters && query.parameters[0] && query.parameters[0].name === 'initialRun') {\r\n                    // implement an MRU, kind of thing\r\n                    let firstResponse = teamBuilder.ComposeExtensionResponse.result('list').attachments([\r\n                        new builder.ThumbnailCard()\r\n                            .title('Test')\r\n                            .text('Test')\r\n                            .images([new builder.CardImage().url('https://roombookingdemo.herokuapp.com/assets/icon.png')])\r\n                            .toAttachment()\r\n                    ]).toResponse();\r\n                    callback(<any>null, firstResponse, 200);\r\n                }\r\n                else {\r\n                    // Return result response\r\n\r\n                    let response = teamBuilder.ComposeExtensionResponse.result('list').attachments([\r\n                        new builder.ThumbnailCard()\r\n                            .title(`Test`)\r\n                            .text('test')\r\n                            .images([new builder.CardImage().url('https://roombookingdemo.herokuapp.com/assets/icon.png')])\r\n                            .toAttachment()\r\n                    ]).toResponse();\r\n                    callback(<any>null, response, 200);\r\n                }\r\n            });\r\n        // this is used when canUpdateConfiguration is set to true \r\n        this.Connector.onQuerySettingsUrl(\r\n            (event: builder.IEvent, query: teamBuilder.ComposeExtensionQuery, callback: (err: Error, result: teamBuilder.IComposeExtensionResponse, statusCode: number) => void) => {\r\n                callback(<any>null, {\r\n                    composeExtension: {\r\n                        type: \"config\",\r\n                        suggestedActions: {\r\n                            actions: [\r\n                                {\r\n                                    type: \"openApp\",\r\n                                    title: \"message Configuration\",\r\n                                    value: 'https://roombookingdemo.herokuapp.com/messageConfig.html'\r\n                                }\r\n                            ]\r\n                        }\r\n                    }\r\n                }, 200);\r\n            }\r\n        )\r\n        this.Connector.onSettingsUpdate(\r\n            (event: builder.IEvent, query: teamBuilder.ComposeExtensionQuery, callback: (err: Error, result: teamBuilder.IComposeExtensionResponse, statusCode: number) => void) => {\r\n                // take care of the setting returned from the dialog, with the value stored in state\r\n                const setting = query.state;\r\n                callback(<any>null, <any>null, 200);\r\n            }\r\n        )\r\n\r\n    }\r\n\r\n    private defaultDialog(session: builder.Session) {\r\n        const text = roombookingBot.extractTextFromMessage(session.message).toLowerCase();\r\n        // const context = new AuthenticationContext(authorityUrl);\r\n\r\n        return wit.message(text).then(({ entities }) => {\r\n            if (entities.document) {\r\n                console.log(' coming first');\r\n                console.log(\"okkkkkkk\");\r\n                auth.getAccessToken().then(function (token) {\r\n                    // console.log('first'+token);\r\n                    // Get all of the users in the tenant.\r\n                    TokenVar=token;\r\n                    console.log('2nd'+TokenVar);\r\n\r\n                console.log('sp');\r\n                var local_char = JSON.stringify(entities.document[0].value).replace(/\\\"/g, \"\");\r\n\r\n                if (local_char == \"all\" || local_char == \"my\") {\r\n                    url = \"https://graph.microsoft.com/v1.0/me/drive/root/children??select=name,id,webURL&&top=10\";\r\n                }\r\n                else {\r\n                    url = `https://graph.microsoft.com/v1.0/me/drive/root/search(q='${local_char}')?select=name,id,webURL`;\r\n                }\r\n                axios.get(url,\r\n                    { headers: { Authorization: `Bearer ${TokenVar}` } })\r\n                    .then(function (response) {\r\n\r\n                        var ct = \"\";\r\n                        var icon = \"\";\r\n\r\n                        const cardData = response.data.value.map(data => {\r\n                            var file_extension = data.name;\r\n                            var afterDot = file_extension.substr(file_extension.indexOf('.'));\r\n\r\n                            switch (afterDot) {\r\n                                case \".docx\":\r\n                                    ct = \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\";\r\n                                    icon = \"https://cdn2.iconfinder.com/data/icons/metro-ui-icon-set/128/Word_15.png\";\r\n                                    break;\r\n                                case \".xlsx\":\r\n                                    ct = \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\";\r\n                                    icon = \"https://cdn2.iconfinder.com/data/icons/metro-ui-icon-set/128/Excel_15.png\";\r\n                                    break;\r\n                                case \".pptx\":\r\n                                    console.log('pptcoming');\r\n                                    ct = \"application/vnd.openxmlformats-officedocument.presentationml.presentation\";\r\n                                    icon = \"https://cdn2.iconfinder.com/data/icons/metro-ui-icon-set/128/PowerPoint_15.png\";\r\n                                    break;\r\n                                case \".pdf\":\r\n                                    ct = \"application/pdf\";\r\n                                    icon = \"https://cdn4.iconfinder.com/data/icons/CS5/256/ACP_PDF%202_file_document.png\";\r\n                                    break;\r\n\r\n                            }\r\n                            return (\r\n                                new builder.HeroCard(session)\r\n                                    .title(\"Name: \" + JSON.stringify(data.name))\r\n                                    .subtitle(\"Web URL: \" + JSON.stringify(data.webUrl))\r\n                                    .images([builder.CardImage.create(session, icon)])\r\n                                    .buttons([\r\n                                        builder.CardAction.openUrl(session, data.webUrl, \"open\")\r\n                                    ])\r\n                                    .text('')\r\n                            )\r\n                        })\r\n                        const msg = new builder.Message(session)\r\n                            .attachmentLayout(builder.AttachmentLayout.carousel)\r\n                            .attachments(cardData)\r\n                            .text(`There are ${response.data.value.length} documents exist with your requirement`)\r\n\r\n                        builder.Prompts.text(session, msg);\r\n                        session.endDialog();\r\n                    }).catch(function (error) {\r\n                        console.log(error);\r\n                    });\r\n                  }, function (error) {\r\n                    console.error('>>> Error getting access token: ' + error);\r\n                  });\r\n\r\n            }\r\n            else if (entities.room_booking && entities.room_type && entities.building_name && entities.startenddatetime) {\r\n                console.log('endstart');\r\n                start_date = JSON.stringify(entities.startenddatetime[0].values[0].from.value).replace(/\\\"/g, \"\").split('T')[0];\r\n\r\n                start_time = moment(JSON.stringify(entities.startenddatetime[0].values[0].from.value).replace(/\\\"/g, \"\").split('T')[1], ' hh:mm A').format('HH:mm A');\r\n\r\n                end_date = JSON.stringify(entities.startenddatetime[0].values[0].to.value).replace(/\\\"/g, \"\").split('T')[0];\r\n\r\n                end_time = moment(JSON.stringify(entities.startenddatetime[0].values[0].to.value).replace(/\\\"/g, \"\").split('T')[1], ' hh:mm A').format('HH:mm A');\r\n                room_Type_choice = JSON.stringify(entities.room_type[0].value).replace(/\\\"/g, \"\");\r\n                building_choice = JSON.stringify(entities.building_name[0].value).replace(/\\\"/g, \"\");\r\n\r\n\r\n                session.beginDialog('/askFromstarting');\r\n                return;\r\n            }\r\n            else if (entities.room_booking && entities.room_type && entities.building_name && entities.startdatetime) {\r\n                console.log('eyssafdsaf');\r\n                start_date = JSON.stringify(entities.startdatetime[0].values[0].value).replace(/\\\"/g, \"\").split('T')[0];\r\n                room_Type_choice = JSON.stringify(entities.room_type[0].value).replace(/\\\"/g, \"\");\r\n                building_choice = JSON.stringify(entities.building_name[0].value).replace(/\\\"/g, \"\");\r\n                start_time = moment(JSON.stringify(entities.startdatetime[0].values[0].value).replace(/\\\"/g, \"\").split('T')[1], ' hh:mm A').format('HH:mm A')\r\n\r\n                session.beginDialog('/askFromstarting');\r\n                return;\r\n            }\r\n\r\n            else if (entities.room_booking && entities.room_type && entities.startenddatetime) {\r\n                console.log('endstart1');\r\n                start_date = JSON.stringify(entities.startenddatetime[0].values[0].from.value).replace(/\\\"/g, \"\").split('T')[0];\r\n\r\n                start_time = moment(JSON.stringify(entities.startenddatetime[0].values[0].from.value).replace(/\\\"/g, \"\").split('T')[1], ' hh:mm A').format('HH:mm A');\r\n\r\n                end_date = JSON.stringify(entities.startenddatetime[0].values[0].to.value).replace(/\\\"/g, \"\").split('T')[0];\r\n\r\n                end_time = moment(JSON.stringify(entities.startenddatetime[0].values[0].to.value).replace(/\\\"/g, \"\").split('T')[1], ' hh:mm A').format('HH:mm A');\r\n                room_Type_choice = JSON.stringify(entities.room_type[0].value).replace(/\\\"/g, \"\");\r\n                session.beginDialog('/askFromstarting');\r\n                return;\r\n            }\r\n            else if (entities.room_booking && entities.room_type && entities.startdatetime) {\r\n                console.log('hey');\r\n                start_date = JSON.stringify(entities.startdatetime[0].values[0].value).replace(/\\\"/g, \"\").split('T')[0];\r\n                room_Type_choice = JSON.stringify(entities.room_type[0].value).replace(/\\\"/g, \"\");\r\n\r\n                start_time = moment(JSON.stringify(entities.startdatetime[0].values[0].value).replace(/\\\"/g, \"\").split('T')[1], ' hh:mm A').format('HH:mm A')\r\n\r\n                session.beginDialog('/askFromstarting');\r\n                return;\r\n            }\r\n            else if (entities.room_booking && entities.building_name && entities.startdatetime) {\r\n                console.log('hii');\r\n                building_choice = JSON.stringify(entities.building_name[0].value).replace(/\\\"/g, \"\");\r\n                start_date = JSON.stringify(entities.startdatetime[0].values[0].value).replace(/\\\"/g, \"\").split('T')[0];\r\n\r\n\r\n                start_time = moment(JSON.stringify(entities.startdatetime[0].values[0].value).replace(/\\\"/g, \"\").split('T')[1], ' hh:mm A').format('HH:mm A')\r\n\r\n                session.beginDialog('/askFromstarting');\r\n                return;\r\n            }\r\n            else if (entities.room_booking && entities.room_type && entities.building_name) {\r\n                console.log('helo');\r\n                room_Type_choice = JSON.stringify(entities.room_type[0].value).replace(/\\\"/g, \"\");\r\n                building_choice = JSON.stringify(entities.building_name[0].value).replace(/\\\"/g, \"\");\r\n\r\n                session.beginDialog('/askFromstarting');\r\n                return;\r\n            }\r\n            else if (entities.room_booking && entities.startdatetime) {\r\n                console.log('hru');\r\n                start_date = JSON.stringify(entities.startdatetime[0].values[0].value).replace(/\\\"/g, \"\").split('T')[0];\r\n                start_time = moment(JSON.stringify(entities.startdatetime[0].values[0].value).replace(/\\\"/g, \"\").split('T')[1], ' hh:mm A').format('HH:mm A')\r\n                session.beginDialog('/askFromstarting');\r\n                return;\r\n            }\r\n            else if (entities.room_booking && entities.room_type) {\r\n                console.log('say');\r\n                room_Type_choice = JSON.stringify(entities.room_type[0].value).replace(/\\\"/g, \"\");\r\n                console.log('coming1', start_date);\r\n                session.beginDialog('/askFromstarting');\r\n                return;\r\n            }\r\n            else if (entities.room_booking && entities.building_name) {\r\n                console.log('hmmmm');\r\n                building_choice = JSON.stringify(entities.building_name[0].value).replace(/\\\"/g, \"\");\r\n                client.query(`SELECT * FROM building where building_name LIKE '%${building_choice}%'`, (err, res) => {\r\n\r\n                    if (res.rows.length == 0) {\r\n                        session.send('Sorry,there no building found with name ' + building_choice);\r\n                        return;\r\n                    }\r\n                    else {\r\n\r\n                        session.beginDialog('/askFromstarting');\r\n                        return;\r\n                    }\r\n\r\n                });\r\n            }\r\n            else if (entities.show_bookings && entities.email) {\r\n                console.log('hunnnn');\r\n                email = JSON.stringify(entities.email[0].value).replace(/\\\"/g, \"\");\r\n                session.beginDialog('/showBookings');\r\n                return;\r\n            } else if (entities.room_booking) {\r\n\r\n                session.beginDialog('/askFromstarting');\r\n                return;\r\n            }\r\n            else {\r\n                session.beginDialog('/welcome_user');\r\n                session.endDialog();\r\n            }\r\n        });\r\n\r\n    }\r\n    /**\r\n    * This is the help dialog of the bot\r\n    * @param session \r\n    */\r\n    private helpDialog(session: builder.Session) {\r\n        session.send('I\\'m just a friendly but rather stupid bot, and right now I don\\'t have any valuable help for you!');\r\n        session.endDialog();\r\n    }\r\n\r\n    /**\r\n    * This is an example of a conversationUpdate event handler\r\n    * @param activity \r\n    */\r\n    private convUpdateHandler(activity: any) {\r\n        log(\"Conversation update\")\r\n    }\r\n\r\n    /**\r\n    * Extracts text only from messages, removing all entity references\r\n    * @param message builder.IMessage\r\n    */\r\n    private static extractTextFromMessage(message: builder.IMessage): string {\r\n        var s = (message.text) ? message.text : '';\r\n        if (message.entities) {\r\n            message.entities.forEach((ent: any) => {\r\n                s = s.replace(ent.text, '');\r\n            })\r\n        }\r\n        return s.trim();\r\n    }\r\n}\r\n","module.exports = require(\"botbuilder\");","module.exports = require(\"axios\");","const WIT_TOKEN = '6YQU5ENYS3SLTGLSLVAY7A7SWWOF2GMG' // TODO: add your wit token here\r\n\r\nfunction firstEntity(entities, name) {\r\n  return entities &&\r\n    entities[name] &&\r\n    Array.isArray(entities[name]) &&\r\n    entities[name] &&\r\n    entities[name][0];\r\n}\r\n\r\nmodule.exports = {\r\n  WIT_TOKEN,\r\n  firstEntity,\r\n};\r\n","'use strict';\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar _require = require('./config'),\n    DEFAULT_API_VERSION = _require.DEFAULT_API_VERSION,\n    DEFAULT_MAX_STEPS = _require.DEFAULT_MAX_STEPS,\n    DEFAULT_WIT_URL = _require.DEFAULT_WIT_URL;\n\nvar fetch = require('isomorphic-fetch');\nvar log = require('./log');\n\nvar learnMore = 'Learn more at https://wit.ai/docs/quickstart';\n\nfunction Wit(opts) {\n  if (!(this instanceof Wit)) {\n    return new Wit(opts);\n  }\n\n  var _config = this.config = Object.freeze(validate(opts)),\n      accessToken = _config.accessToken,\n      apiVersion = _config.apiVersion,\n      headers = _config.headers,\n      logger = _config.logger,\n      witURL = _config.witURL;\n\n  this._sessions = {};\n\n  this.message = function (message, context, n, verbose, junk) {\n    var qs = 'q=' + encodeURIComponent(message);\n    if (context) {\n      qs += '&context=' + encodeURIComponent(JSON.stringify(context));\n    }\n    if (typeof n === 'number') {\n      qs += '&n=' + encodeURIComponent(JSON.stringify(n));\n    }\n    if (verbose != null) {\n      qs += '&verbose=' + encodeURIComponent(JSON.stringify(verbose));\n    }\n    if (junk != null) {\n      qs += '&junk=true';\n    }\n    var method = 'GET';\n    var fullURL = witURL + '/message?' + qs;\n    var handler = makeWitResponseHandler(logger, 'message');\n    logger.debug(method, fullURL);\n    return fetch(fullURL, {\n      method: method,\n      headers: headers\n    }).then(function (response) {\n      return Promise.all([response.json(), response.status]);\n    }).then(handler);\n  };\n}\n\nvar makeWitResponseHandler = function makeWitResponseHandler(logger, endpoint) {\n  return function (rsp) {\n    var error = function error(err) {\n      logger.error('[' + endpoint + '] Error: ' + err);\n      throw err;\n    };\n\n    if (rsp instanceof Error) {\n      return error(rsp);\n    }\n\n    var _rsp = _slicedToArray(rsp, 2),\n        json = _rsp[0],\n        status = _rsp[1];\n\n    if (json instanceof Error) {\n      return error(json);\n    }\n\n    var err = json.error || status !== 200 && json.body + ' (' + status + ')';\n\n    if (err) {\n      return error(err);\n    }\n\n    logger.debug('[' + endpoint + '] Response: ' + JSON.stringify(json));\n    return json;\n  };\n};\n\nvar validate = function validate(opts) {\n  if (!opts.accessToken) {\n    throw new Error('Could not find access token, learn more at https://wit.ai/docs');\n  }\n  opts.witURL = opts.witURL || DEFAULT_WIT_URL;\n  opts.apiVersion = opts.apiVersion || DEFAULT_API_VERSION;\n  opts.headers = opts.headers || {\n    'Authorization': 'Bearer ' + opts.accessToken,\n    'Accept': 'application/vnd.wit.' + opts.apiVersion + '+json',\n    'Content-Type': 'application/json'\n  };\n  opts.logger = opts.logger || new log.Logger(log.INFO);\n\n  return opts;\n};\n\nmodule.exports = Wit;","'use strict';\n\nmodule.exports = {\n  DEFAULT_API_VERSION: '20160516',\n  DEFAULT_MAX_STEPS: 5,\n  DEFAULT_WIT_URL: 'https://api.wit.ai'\n};","module.exports = require(\"isomorphic-fetch\");","'use strict';\n\nvar _funcs;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar DEBUG = 'debug';\nvar INFO = 'info';\nvar WARN = 'warn';\nvar ERROR = 'error';\n\nvar levels = [DEBUG, INFO, WARN, ERROR];\nvar funcs = (_funcs = {}, _defineProperty(_funcs, DEBUG, console.error.bind(console, '[wit][debug]')), _defineProperty(_funcs, INFO, console.log.bind(console, '[wit]')), _defineProperty(_funcs, WARN, console.warn.bind(console, '[wit]')), _defineProperty(_funcs, ERROR, console.error.bind(console, '[wit]')), _funcs);\nvar noop = function noop() {};\n\nvar Logger = function Logger(lvl) {\n  var _this = this;\n\n  this.level = lvl || INFO;\n\n  levels.forEach(function (x) {\n    var should = levels.indexOf(x) >= levels.indexOf(lvl);\n    _this[x] = should ? funcs[x] : noop;\n  });\n};\n\nmodule.exports = { Logger: Logger, DEBUG: DEBUG, INFO: INFO, WARN: WARN, ERROR: ERROR };","var request = require('request');\r\nvar Q = require('q');\r\nvar config = require('./config');\r\n\r\n// The auth module object.\r\nvar auth = {};\r\n\r\n// @name getAccessToken\r\n// @desc Makes a request for a token using client credentials.\r\nauth.getAccessToken = function () {\r\n  var deferred = Q.defer();\r\nconsole.log('coming');\r\n  // These are the parameters necessary for the OAuth 2.0 Client Credentials Grant Flow.\r\n  // For more information, see Service to Service Calls Using Client Credentials (https://msdn.microsoft.com/library/azure/dn645543.aspx).\r\n  var requestParams = {\r\n    grant_type: 'client_credentials',\r\n    client_id: config.clientId,\r\n    client_secret: config.clientSecret,\r\n    resource: 'https://graph.microsoft.com'\r\n  };\r\n\r\n  // Make a request to the token issuing endpoint.\r\n  request.post({ url: config.tokenEndpoint, form: requestParams }, function (err, response, body) {\r\n    var parsedBody = JSON.parse(body);\r\n    if (err) {\r\n      deferred.reject(err);\r\n    } else if (parsedBody.error) {\r\n      deferred.reject(parsedBody.error_description);\r\n    } else {\r\n      // If successful, return the access token.\r\n      console.log(parsedBody.access_token);\r\n      deferred.resolve(parsedBody.access_token);\r\n    }\r\n  });\r\n\r\n  return deferred.promise;\r\n};\r\n\r\n\r\n\r\nmodule.exports = auth;\r\n","module.exports = require(\"q\");","module.exports = {\r\n    clientId: '5dee4ed3-9f9e-4725-abbf-0298d4991a05',\r\n    clientSecret: '(@?[X[:/XFi;1STwO1/sqU0rv',\r\n    tokenEndpoint: 'https://login.microsoftonline.com/b120d07c-d3c6-47a5-9f9c-640215ad6358/oauth2/token',\r\n  \r\n  };","module.exports = require(\"moment\");","module.exports = require(\"pg\");","import * as request from 'request';\r\nimport * as teamBuilder from 'botbuilder-teams';\r\nimport { Request } from \"express\";\r\nimport { ConnectorDeclaration, IConnector } from 'express-msteams-host';\r\nconst JsonDB = require('node-json-db');\r\n\r\n/**\r\n * The connector data interface\r\n */\r\ninterface IroombookingConnectorData {\r\n    webhookUrl: string;\r\n    user: string;\r\n    appType: string;\r\n    groupName: string;\r\n    color: string;\r\n    existing: boolean;\r\n}\r\n\r\n/**\r\n * Implementation of the \"roombookingConnectorConnector\" Office 365 Connector\r\n */\r\n@ConnectorDeclaration(\r\n    '/api/connector/connect',\r\n    '/api/connector/ping',\r\n    'web/roombookingConnectorConnect.ejs',\r\n    '/roombookingConnectorConnected.html'\r\n)\r\nexport class roombookingConnector implements IConnector {\r\n    private connectors: any;\r\n\r\n    public constructor() {\r\n        // Instantiate the node-json-db database (connectors.json)\r\n        this.connectors = new JsonDB('connectors', true, false);\r\n    }\r\n\r\n    public Connect(req: Request) {\r\n        if (req.body.state === 'myAppsState') {\r\n            this.connectors.push('/connectors[]', {\r\n                webhookUrl: req.body.webhookUrl,\r\n                user: req.body.user,\r\n                appType: req.body.appType,\r\n                groupName: req.body.groupName,\r\n                existing: true,\r\n                color: req.body.color\r\n            });\r\n        }\r\n    }\r\n\r\n    public Ping(req: Request): Array<Promise <void>> {\r\n        // clean up connectors marked to be deleted\r\n        try {\r\n            this.connectors.push('/connectors',\r\n                (<IroombookingConnectorData[]>this.connectors.getData('/connectors')).filter((c => {\r\n                    return c.existing;\r\n                })));\r\n        } catch (error) {\r\n            if (error.name && error.name == 'DataError') {\r\n                // there's no registered connectors\r\n                return [];\r\n            }\r\n            throw error;\r\n        }\r\n\r\n        // send pings to all subscribers\r\n        return (<IroombookingConnectorData[]>this.connectors.getData('/connectors')).map((connector, index) => {\r\n            return new Promise<void>((resolve, reject) => {\r\n                const card = new teamBuilder.O365ConnectorCard();\r\n                card.title('Sample connector');\r\n                card.text(`This is a sample Office 365 Connector`);\r\n\r\n                // set the theme to the user configured theme color\r\n                card.themeColor(connector.color); \r\n\r\n                const section = new teamBuilder.O365ConnectorCardSection();\r\n                section.activityTitle('Ping');\r\n                section.activityText(`This is just a sample ping`);\r\n\r\n                const fact = new teamBuilder.O365ConnectorCardFact();\r\n                fact.name('Created by');\r\n                fact.value(connector.user);\r\n                section.facts([fact]);\r\n                card.sections([section]);\r\n\r\n                const action = new teamBuilder.O365ConnectorCardViewAction();\r\n                action.name('Yo Teams');\r\n                action.target('http://aka.ms/yoteams');\r\n                card.potentialAction([action]);\r\n\r\n                request({\r\n                    method: 'POST',\r\n                    uri: decodeURI(connector.webhookUrl),\r\n                    headers: {\r\n                        'content-type': 'application/json',\r\n                    },\r\n                    body: JSON.stringify(card.toAttachment().content)\r\n                }, (error: any, response: any, body: any) => {\r\n                    if (error) {\r\n                        reject(error)\r\n                    } else {\r\n                        // 410 - the user has removed the connector\r\n                        if (response.statusCode === 410) {\r\n                            this.connectors.push(`/connectors[${index}]/existing`, false);\r\n                        }\r\n                        resolve();\r\n                    }\r\n                })\r\n            });\r\n        });\r\n    }\r\n}\r\n","module.exports = require(\"node-json-db\");"],"sourceRoot":""}